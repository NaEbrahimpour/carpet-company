/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package strassen;

/**
 *
 * @author ErfanN
 */
public class Strassen {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
                int C[][]=new int[8][8];
        int A[][]=new int[8][8];
        int B[][]=new int[8][8];
        A[0][0]=A[0][3]=A[1][4]=A[2][1]=A[3][3]=B[0][0]=B[1][3]=B[2][4]=B[4][3]=B[4][4]=1;
        A[0][1]=A[0][4]=A[1][3]=A[2][4]=B[0][1]=B[2][1]=B[3][3]=2;
        A[2][3]=A[3][4]=A[4][2]=B[2][0]=B[2][3]=B[4][1]=B[4][2]=0;
        A[1][0]=A[3][1]=A[4][3]=B[0][2]=B[1][0]=B[3][4]=A[4][0]=3;
        A[1][1]=A[2][2]=A[4][1]=B[0][3]=B[1][4]=B[4][0]=4;
        A[2][0]=B[0][4]=B[2][2]=B[3][1]=5;
        A[0][2]=A[3][2]=B[1][1]=6;
        A[1][2]=B[3][2]=7;
        A[3][0]=B[1][2]=B[3][0]=8;
        //addZeor(A);
        //addZeor(B);
        //addZeor(C);
        strassen(8, A, B, C);
        //graphColoring(n, vertic);
        
        
        for(int i=0 ; i<8 ; i++){
            for(int j=0 ; j<8 ; j++)
                System.out.print(C[i][j]+" ");
            System.out.println();
        }
    }
    static void strassen(int n,int A[][],int B[][],int C[][]){
    if(n==2){
        C[0][0]=(A[0][0]*B[0][0]) + (A[0][1]*B[1][0]);
        C[0][1]=(A[0][0]*B[0][1]) + (A[0][1]*B[1][1]);
        C[1][0]=(A[1][0]*B[0][0]) + (A[1][1]*B[1][0]);
        C[1][1]=(A[1][0]*B[0][1]) + (A[1][1]*B[1][1]);
        
        /*for(int i=0 ; i<25 ; i++)
            for(int j=0 ; j<25 ; j++)
                for(int k=0 ; k< 25 ; k++)
                    C[i][k]+=A[i][j]*B[j][k];*/
    }
    else {
        int A11[][]=new int[n/2][n/2];
        int A12[][]=new int[n/2][n/2];
        int A21[][]=new int[n/2][n/2];
        int A22[][]=new int[n/2][n/2];
        int B11[][]=new int[n/2][n/2];
        int B12[][]=new int[n/2][n/2];
        int B21[][]=new int[n/2][n/2];
        int B22[][]=new int[n/2][n/2];
        int M1[][]=new int[n/2][n/2],M2[][]=new int[n/2][n/2],M3[][]=new int[n/2][n/2]
                ,M4[][]=new int[n/2][n/2],M5[][]=new int[n/2][n/2],M6[][]=new int[n/2][n/2]
                ,M7[][]=new int[n/2][n/2],C00[][]=new int[n][n],C01[][]=new int[n][n],
                C10[][]=new int[n][n],C11[][]=new int[n][n],i,j,t=0;
            for(i=0 ; i<n/2 ; i++)
                for(j=0 ; j<n/2 ; j++){
                    A11[i][j]=A[i][j];
                    A12[i][j]=A[i][j+n/2];
                    B11[i][j]=B[i][j];
                    B12[i][j]=B[i][j+n/2];
                    A21[i][j]=A[i+n/2][j];
                    A22[i][j]=A[i+n/2][j+n/2];
                    B21[i][j]=B[i+n/2][j];
                    B22[i][j]=B[i+n/2][j+n/2];
                }
       
        strassen(n/2, add(n/2,A11,A22,true), add(n/2,B11,B22,true), M1);
        strassen(n/2,add(n/2, A21, A22,true), B11 , M2);
        strassen(n/2, A11, add(n/2,B12,B22,false), M3);
        strassen(n/2, A22, add(n/2, B21, B11, false), M4);
        strassen(n/2,add(n/2, A11, A12, true) , B22, M5);
        strassen(n/2, add(n/2, A21, A11, false), add(n/2, B11, B12, true), M6);
        strassen(n/2, add(n/2, A12, A22, false), add(n/2, B21, B22, true), M7);
        C00=add(M1.length,add(M1.length, M1, M4, true),add(M5.length, M5, M7, true),false);
        C01=add(M3.length, M3, M5, true);
        C10=add(M2.length,M2, M4, true);
        C11=add(M1.length,add(M1.length, M1, M3, true),add(M2.length, M2, M6, true),false);
        for(i=0 ; i<C00.length ; i++)
            for(j=0 ; j<C00.length ; j++){
                C[i][j]=C00[i][j];
                C[i][j+n/2]=C01[i][j];
                C[i+n/2][j]=C10[i][j];
                C[i+n/2][j+n/2]=C11[i][j];
            }
    }
}
static int[][] add(int n,int A[][],int B[][],boolean addOrsub){
    int C[][]=new int[n][n];
    for(int i=0 ; i<n ; i++)
        for(int j=0 ; j<n ; j++)
            if(addOrsub) C[i][j]=A[i][j]+B[i][j];
            else C[i][j]=A[i][j]-B[i][j];
    return C;
}

}
